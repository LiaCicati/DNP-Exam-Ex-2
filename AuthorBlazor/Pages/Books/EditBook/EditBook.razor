@page "/books/{bookIsbn:int}/editBook"
@inject IBookService _bookService
@inject IAuthorService _authorService
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Components
@using AuthorBlazor.Data
@using AuthorBlazor.Models


<section>
    <h3>Edit Book</h3>
    <EditForm Model="@_book" OnValidSubmit="@Save">
        <div class="form-group">
            Author: <br/>
            <InputSelect @bind-Value="@_book.AuthorId">
                <option value="">-- Select --</option>
                @foreach (Author _author in _authors)
                {
                    <option value="@_author.Id">@_author.FirstName @_author.LastName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            Title:<br/>
            <InputText @bind-Value="_book.Title"/>
        </div>
        <div class="form-group">
            Publication Year:<br/>
            <InputNumber @bind-Value="_book.PublicationYear"/>
        </div>
        <div class="form-group">
            Nr of pages:<br/>
            <InputNumber @bind-Value="_book.NrOfPages"/>
        </div>
        <div class="form-group">
            Genre:<br/>
            <InputText @bind-Value="_book.Genre"/>
        </div>
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <p class="text-danger">@_errorMessage</p>
        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Create</button>
        </p>
    </EditForm>
</section>

@code {

    [Parameter]
    public int BookIsbn { get; set; }

    private string _errorMessage;
    private Book _book = new Book();
    private IList<Author> _authors = new List<Author>();
 
    protected override async Task OnInitializedAsync()
    {
        _authors = await _authorService.GetAuthorsAsync();
        _book = await _bookService.GetBookByIsbnAsync(BookIsbn);
    }

    private async Task Save()
    {
        try
        {
            await _bookService.UpdateBookAsync(_book);
            _navigationManager.NavigateTo($"/books");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            StateHasChanged();
        }
    }

}